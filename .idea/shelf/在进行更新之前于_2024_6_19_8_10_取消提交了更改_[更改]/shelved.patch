Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># LvU-驴友辅助系统\r\n实现一个驴友辅助系统\r\n\r\n# 初步实现前端UI界面美化：\r\n1. 登录注册界面实现\r\n2. 主页界面实现\r\n\r\n# 仍需实现各个功能具体页面的美化\r\n1. 查看队伍成员界面\r\n2. 管理队伍界面美化\r\n3. 其他各个界面的按钮等其他细节的美化工作\r\n\r\n# 0607-hcy\r\n1. 修改了管理队伍界面bug\r\n2. 更新数据库，增加了用户以及队伍的一些具体信息\r\n3. 创建队伍界面实现\r\n\r\n# 0607-zwx\r\n1. 完善查看队伍信息界面，展示新增信息\r\n2. 数据库预算类型更改\r\n3. 管理队伍界面补充新增队伍信息的修改\r\n4. 加入的队伍界面新增退队功能，非管理的队伍界面（管理员不可退队）\r\n5. 对于可选队伍，加入筛选功能(游玩时间较复杂，涉及数据类型，暂未实现)\r\n6. 修改用户信息（用户名不可重复）\r\n7. 修改用户账号密码\r\n\r\n# 0613-hcy\r\n1. 实现网络爬虫获取景点信息\r\n2. 将csv导入到sql数据库中\r\n\r\n# 0613-zwx\r\n1. 搜索用户以发送组队邀请,接收组队邀请\r\n2. 新增发送的邀请和收到的邀请界面\r\n3. 景点推荐\r\n4. 修复一些原有功能bug\r\n\r\n\r\n# 0614-zwx\r\n1. 数据库的表中重复记录的问题(修改涉及team_membership表的各功能实现逻辑：先查询再修改，不直接新增，修改前增加判断)\r\n2. 管理员审核入队申请时加入队伍人数判断(bug修复)\r\n3. 邀请处理界面，界面刷新后还能再次点击同意/拒绝(bug修复)\r\n4. 邀请处理界面，新增查看队伍信息按钮\r\n5. 新增消息通知界面\r\n\r\n\r\n# 待实现\r\n1. 队伍推荐\r\n2. 流量统计(加入队伍的申请数，队伍浏览量(打开队伍信息界面浏览量+1))
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 20e904b7bd38d8d3c001745a5a2d6762cef393a2)
+++ b/README.md	(date 1718610004182)
@@ -44,5 +44,4 @@
 
 
 # 待实现
-1. 队伍推荐
-2. 流量统计(加入队伍的申请数，队伍浏览量(打开队伍信息界面浏览量+1))
\ No newline at end of file
+1. 流量统计(加入队伍的申请数，队伍浏览量(打开队伍信息界面浏览量+1))
\ No newline at end of file
Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, render_template, redirect, url_for, flash, request, jsonify\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_bcrypt import Bcrypt\r\nfrom flask_migrate import Migrate\r\nfrom flask_login import LoginManager, login_user, current_user, logout_user, login_required\r\nfrom sqlalchemy import text, and_, func, Integer, cast\r\n\r\nfrom forms import RegistrationForm, LoginForm, TeamForm, UserForm\r\nfrom forms import ManageTeamForm  # 新增管理队伍的表单\r\nfrom models import db, User, Team, team_membership, Invitation, Attractions, Notification\r\n\r\napp = Flask(__name__)\r\napp.config['SECRET_KEY'] = 'your_secret_key'\r\n# 配置 MySQL 数据库连接 密码为本地root用户密码\r\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:12345@localhost/lvu'\r\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\r\n\r\ndb.init_app(app)\r\nmigrate = Migrate(app, db)\r\nbcrypt = Bcrypt(app)\r\nlogin_manager = LoginManager(app)\r\nlogin_manager.login_view = 'login'\r\n\r\n\r\n@login_manager.user_loader\r\ndef load_user(user_id):\r\n    return User.query.get(int(user_id))\r\n\r\n\r\n@app.route('/index', methods=['GET', 'POST'])\r\ndef index():\r\n    teams = Team.query.all()\r\n    current_user_teams = current_user.teams\r\n    approved_teams = []\r\n    pending_teams = []\r\n    username = current_user.username\r\n\r\n    for team in current_user_teams:\r\n        membership = db.session.query(team_membership).filter_by(\r\n            join_user_id=current_user.id, team_id=team.id).first()\r\n\r\n        if membership is None:\r\n            continue  # 如果 membership 为空，跳过当前团队的处理\r\n\r\n        if membership.audit_status == 1:\r\n            approved_teams.append(team)\r\n        elif membership.audit_status == 0:\r\n            pending_teams.append(team)\r\n\r\n    return render_template('index.html', teams=teams, approved_teams=approved_teams, pending_teams=pending_teams, username=username)\r\n\r\n\r\n# 用户注册\r\n@app.route('/register', methods=['GET', 'POST'])\r\ndef register():\r\n    form = RegistrationForm()\r\n    if form.validate_on_submit():\r\n        existing_user = User.query.filter_by(\r\n            username=form.username.data).first()\r\n        if existing_user is None:\r\n            user = User(username=form.username.data,\r\n                        password=form.password.data)\r\n            db.session.add(user)\r\n            db.session.commit()\r\n            flash('注册成功', 'success')\r\n        else:\r\n            flash('用户名已存在', 'danger')\r\n    if form.password.data is not None and form.confirm_password.data is not None and form.password.data != form.confirm_password.data:\r\n        flash('两次密码不一致', 'danger')\r\n    return render_template('page/register.html', form=form)\r\n\r\n\r\n# 用户登录\r\n@app.route('/')\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n    form = LoginForm()\r\n    if form.validate_on_submit():\r\n        user = User.query.filter_by(username=form.username.data).first()\r\n        if user and user.password == form.password.data:\r\n            login_user(user, remember=True)\r\n            flash('登录成功！', 'success')\r\n        else:\r\n            flash('登录失败，请检查账号密码是否正确！', 'danger')\r\n    return render_template('page/login.html', form=form)\r\n\r\n\r\n# 更改用户信息\r\n@app.route('/user_setting', methods=['GET', 'POST'])\r\n@login_required\r\ndef user_setting():\r\n    if request.method == 'POST':\r\n        current_user.username = request.form['username']\r\n        current_user.phone = request.form['phone']\r\n        current_user.id_code = request.form.get('id_code', '')\r\n        current_user.gender = request.form.get('gender', '')\r\n        current_user.character = request.form.get('character', '')\r\n        current_user.residence = request.form.get('residence', '')\r\n        current_user.travel_hobby = request.form.get('travel_hobby', '')\r\n        db.session.commit()\r\n        return jsonify({'message': '用户信息已更新'}), 200\r\n\r\n    return render_template('page/user_setting.html')\r\n\r\n\r\n# 修改用户密码\r\n@app.route('/user_password', methods=['GET', 'POST'])\r\n@login_required\r\ndef user_password():\r\n    if request.method == 'POST':\r\n        old_password = request.form['old_password']\r\n        new_password = request.form['new_password']\r\n        again_password = request.form['again_password']\r\n\r\n        # Check if old password is correct\r\n        if current_user.password != old_password:\r\n            return jsonify({'message': '旧的密码不正确'}), 400\r\n\r\n        # Check if new passwords match\r\n        if new_password != again_password:\r\n            return jsonify({'message': '两次输入的新密码不一致'}), 400\r\n\r\n        # Update password in the database\r\n        current_user.password = new_password\r\n        db.session.commit()\r\n        return jsonify({'message': '密码已更新'}), 200\r\n\r\n    return render_template('page/user_password.html')\r\n\r\n\r\n# 创建队伍\r\n@app.route('/create_team', methods=['GET', 'POST'])\r\n@login_required\r\ndef create_team():\r\n    form = TeamForm()\r\n    user = current_user\r\n    if form.validate_on_submit():\r\n        team = Team(\r\n            destination=form.destination.data,\r\n            departure_location=form.departure_location.data,\r\n            travel_mode=form.travel_mode.data,\r\n            team_type=form.team_type.data,\r\n            travel_time=form.travel_time.data,\r\n            travel_budget=form.travel_budget.data,\r\n            max_members=form.max_members.data,\r\n            current_members=1,  # 创建时包含队伍创建者\r\n            public_id=user.id,  # 记录队伍创建者\r\n            admin_id=user.id,  # 初始化管理员为队伍创建者\r\n            travel_plan=None    # 初始化旅行计划\r\n        )\r\n        db.session.add(team)\r\n        db.session.flush()  # 刷新 session 以获取新创建的 team.id\r\n\r\n        # 将队伍创建者加入到队伍中, 并设置 audit_status 为 1\r\n        db.session.execute(\r\n            text(\r\n                'INSERT INTO user_team (team_id, join_user_id, audit_status) VALUES (:team_id, :user_id, :audit_status)'),\r\n            {'team_id': team.id, 'user_id': user.id, 'audit_status': 1}\r\n        )\r\n\r\n        db.session.commit()\r\n        flash('您的队伍已创建！', 'success')\r\n        return redirect(url_for('my_manage_team'))\r\n    return render_template('page/create_team.html', form=form)\r\n\r\n\r\n# 发送的申请（发送申请界面）\r\n@app.route('/sending_requests', methods=['GET', 'POST'])\r\ndef sending_requests():\r\n    teams = Team.query.all()\r\n    approved_teams = []\r\n    pending_teams = []\r\n    deny_teams = []\r\n    username = current_user.username\r\n\r\n    for team in teams:\r\n        membership = db.session.query(team_membership).filter_by(\r\n            join_user_id=current_user.id, team_id=team.id).first()\r\n\r\n        if membership is None:\r\n            continue  # 如果 membership 为空，跳过当前团队的处理\r\n\r\n        if membership.audit_status == 1:\r\n            approved_teams.append(team)\r\n        elif membership.audit_status == 0:\r\n            pending_teams.append(team)\r\n        else:\r\n            deny_teams.append(team)\r\n\r\n    return render_template('page/sending_requests.html', teams=teams, approved_teams=approved_teams, pending_teams=pending_teams, deny_teams=deny_teams, username=username)\r\n\r\n\r\n# 根据条件筛选队伍\r\n@app.route('/search_teams', methods=['POST'])\r\n@login_required\r\ndef search_teams():\r\n    destination = request.form.get('destination', None)\r\n    departure_location = request.form.get('departure_location', None)\r\n    travel_mode = request.form.get('travel_mode', None)\r\n    team_type = request.form.get('team_type', None)\r\n    max_travel_budget = request.form.get('max_travel_budget', None)\r\n\r\n    # 根据搜索条件查询队伍\r\n    teams = Team.query.filter(\r\n        Team.admin_id != current_user.id, Team not in current_user.teams)\r\n\r\n    filters = []\r\n\r\n    if destination:\r\n        filters.append(Team.destination.ilike(f'%{destination}%'))\r\n\r\n    if departure_location:\r\n        filters.append(Team.departure_location.ilike(\r\n            f'%{departure_location}%'))\r\n\r\n    if travel_mode and travel_mode != '无要求':\r\n        filters.append(Team.travel_mode == travel_mode)\r\n\r\n    if team_type and team_type != '无要求':\r\n        filters.append(Team.team_type == team_type)\r\n\r\n    if max_travel_budget:\r\n        filters.append(Team.travel_budget <= max_travel_budget)\r\n\r\n    teams = teams.filter(and_(*filters)).all()\r\n\r\n    return render_template('page/search_results.html', teams=teams)\r\n\r\n\r\n# 加入队伍\r\n@app.route('/join_team/<int:team_id>', methods=['POST'])\r\n@login_required\r\ndef join_team(team_id):\r\n    team = Team.query.get_or_404(team_id)\r\n    user = current_user\r\n\r\n    if team.current_members >= team.max_members:\r\n        flash('该队伍已满员。')\r\n        return redirect(url_for('joinable_teams'))\r\n\r\n    if team in user.teams:\r\n        flash('您已申请加入该队伍。')\r\n        return redirect(url_for('joinable_teams'))\r\n\r\n    # 更改实现逻辑，检查是否存在对应的申请记录\r\n    membership = db.session.query(team_membership).filter_by(\r\n        join_user_id=user.id, team_id=team.id).first()\r\n\r\n    if membership:\r\n        if membership.audit_status == 2:\r\n            # 如果找到记录且 audit_status 为 2，则将其更新为 0\r\n            stmt = team_membership.update().where(\r\n                team_membership.c.join_user_id == user.id,\r\n                team_membership.c.team_id == team_id\r\n            ).values(audit_status=0)\r\n            db.session.execute(stmt)\r\n\r\n            db.session.commit()\r\n            flash('成功向队伍管理员发送入队申请', 'success')\r\n\r\n            add_notification(team.admin_id, f\"你收到一条来自 {current_user.username} 的入队申请。\", url_for('team_requests'))\r\n        else:\r\n            flash('您已经在该队伍中！')\r\n    else:\r\n        # 如果没找到，则新增一条记录\r\n        ins = team_membership.insert().values(\r\n            join_user_id=user.id, team_id=team.id, audit_status=0)\r\n        db.session.execute(ins)\r\n        db.session.commit()\r\n        flash('成功向队伍管理员发送入队申请', 'success')\r\n        add_notification(team.admin_id, f\"你收到一条来自 {current_user.username} 的入队申请。\", url_for('team_requests'))\r\n\r\n    return redirect(url_for('joinable_teams'))\r\n\r\n\r\n# 同意加入队伍申请\r\n@app.route('/approve_request/<int:join_user_id>/<int:team_id>', methods=['POST'])\r\n@login_required\r\ndef approve_request(join_user_id, team_id):\r\n    team = Team.query.get_or_404(team_id)\r\n\r\n    if team.admin_id != current_user.id:\r\n        flash('您没有权限批准此请求。')\r\n        return redirect(url_for('team_requests'))\r\n\r\n    if team.current_members >= team.max_members:\r\n        flash('无法批准请求，队伍已满员!')\r\n        return redirect(url_for('team_requests'))\r\n\r\n    # 更新申请状态为1（审核通过）\r\n    stmt = team_membership.update().where(\r\n        team_membership.c.join_user_id == join_user_id,\r\n        team_membership.c.team_id == team_id\r\n    ).values(audit_status=1)\r\n    db.session.execute(stmt)\r\n    team.current_members += 1\r\n    db.session.commit()\r\n\r\n    add_notification(join_user_id, f\"你的入队申请被 {current_user.username} 批准。\", url_for('sending_requests'))\r\n\r\n    flash('请求已通过！', 'success')\r\n    return redirect(url_for('team_requests'))\r\n\r\n\r\n# 拒绝加入队伍申请\r\n@app.route('/deny_request/<int:join_user_id>/<int:team_id>', methods=['POST'])\r\n@login_required\r\ndef deny_request(join_user_id, team_id):\r\n    team = Team.query.get_or_404(team_id)\r\n    if team.admin_id != current_user.id:\r\n        flash('您没有权限拒绝此请求。')\r\n        return redirect(url_for('team_requests'))\r\n\r\n    # 更新申请状态为2（审核不通过）\r\n    stmt = team_membership.update().where(\r\n        team_membership.c.join_user_id == join_user_id,\r\n        team_membership.c.team_id == team_id\r\n    ).values(audit_status=2)\r\n    db.session.execute(stmt)\r\n    db.session.commit()\r\n\r\n    add_notification(join_user_id, f\"你的入队申请被 {current_user.username} 拒绝。\", url_for('sending_requests'))\r\n\r\n    flash('已成功拒绝入队申请！', 'success')\r\n    return redirect(url_for('team_requests'))\r\n\r\n\r\n@app.route('/admin_dashboard')\r\n@login_required\r\ndef admin_dashboard():\r\n    teams = Team.query.filter_by(admin_id=current_user.id).all()\r\n    return render_template('page/admin_dashboard.html', teams=teams)\r\n\r\n\r\n# 管理员待处理申请\r\n@app.route('/team_requests', methods=['GET'])\r\n@login_required\r\ndef team_requests():\r\n    # 获取当前用户管理的所有队伍\r\n    teams = Team.query.filter_by(admin_id=current_user.id).all()\r\n    team_ids = [team.id for team in teams]\r\n\r\n    # 查询待处理的申请\r\n    pending_requests = db.session.query(User.username, Team.destination, team_membership.c.join_user_id,\r\n                                        team_membership.c.team_id) \\\r\n        .join(User, User.id == team_membership.c.join_user_id) \\\r\n        .join(Team, Team.id == team_membership.c.team_id) \\\r\n        .filter(team_membership.c.team_id.in_(team_ids), team_membership.c.audit_status == 0).all()\r\n\r\n    # 将查询结果包装成字典形式\r\n    requests_dict = {}\r\n    for request_info in pending_requests:\r\n        # 将用户ID和队伍ID作为唯一标识符\r\n        request_id = f\"{request_info.join_user_id}-{request_info.team_id}\"\r\n        requests_dict[request_id] = {\r\n            'username': request_info.username,\r\n            'destination': request_info.destination,\r\n            'join_user_id': request_info.join_user_id,\r\n            'team_id': request_info.team_id\r\n        }\r\n\r\n    return render_template('page/team_requests.html', requests_dict=requests_dict)\r\n\r\n\r\n# 用户登出\r\n@app.route('/logout')\r\ndef logout():\r\n    logout_user()\r\n    return redirect(url_for('login'))\r\n\r\n\r\n# 主界面\r\n@app.route('/home')\r\ndef home():\r\n    teams = Team.query.all()\r\n    current_user_teams = current_user.teams\r\n    approved_teams = []\r\n    pending_teams = []\r\n    username = current_user.username\r\n\r\n    for team in current_user_teams:\r\n        membership = db.session.query(team_membership).filter_by(\r\n            join_user_id=current_user.id, team_id=team.id).first()\r\n\r\n        if membership is None:\r\n            continue  # 如果 membership 为空，跳过当前团队的处理\r\n\r\n        if membership.audit_status == 1:\r\n            approved_teams.append(team)\r\n        elif membership.audit_status == 0:\r\n            pending_teams.append(team)\r\n\r\n    return render_template('page/home.html',\r\n                           teams=teams, approved_teams=approved_teams, pending_teams=pending_teams, username=username)\r\n\r\n\r\n# 队伍成员查看队伍信息\r\n@app.route('/team/<int:team_id>', methods=['GET'])\r\n@login_required\r\ndef view_team(team_id):\r\n    team = Team.query.get_or_404(team_id)\r\n    approved_members = db.session.query(User).join(team_membership).filter(\r\n        team_membership.c.team_id == team_id,\r\n        team_membership.c.audit_status == 1\r\n    ).all()\r\n    # 查询队伍目的地的前五个景点推荐\r\n    city = team.destination\r\n    top_attractions = (Attractions.query.filter(\r\n        Attractions.城市 == city,\r\n        Attractions.排名 != '0'\r\n    ).order_by(\r\n        cast(func.substring_index(Attractions.排名, '第', -1), Integer)\r\n    ).limit(5).all())\r\n\r\n    return render_template('page/view_team.html', team=team, approved_members=approved_members, top_attractions=top_attractions)\r\n\r\n\r\n# 添加旅行计划\r\n@app.route('/add_to_travel_plan', methods=['POST'])\r\ndef add_to_travel_plan():\r\n    data = request.get_json()\r\n    team_id = data.get('team_id')\r\n    attraction_name = data.get('attraction_name')\r\n\r\n    team = Team.query.get(team_id)\r\n    if not team:\r\n        return jsonify({'success': False, 'message': '队伍不存在'})\r\n\r\n    # 获取当前的旅行计划，如果为 None，设为一个空字符串\r\n    current_travel_plan = team.travel_plan or ''\r\n\r\n    # 检查旅行计划中是否已经包含该景点名称\r\n    if attraction_name in current_travel_plan:\r\n        return jsonify({'success': False, 'message': '旅行计划中已包含该景点'})\r\n\r\n    # 更新旅行计划\r\n    if current_travel_plan:\r\n        new_travel_plan = f\"{current_travel_plan}，{attraction_name}\"\r\n    else:\r\n        new_travel_plan = attraction_name\r\n\r\n    team.travel_plan = new_travel_plan\r\n    db.session.commit()\r\n\r\n    return jsonify({'success': True})\r\n\r\n\r\n# 退出队伍\r\n@app.route('/leave_team/<int:team_id>', methods=['POST'])\r\n@login_required\r\ndef leave_team(team_id):\r\n    # 获取当前用户和队伍\r\n    user = current_user\r\n    team = Team.query.get_or_404(team_id)\r\n    # 从数据库中查找用户与队伍的关联记录并删除\r\n    user_team_record = team_membership.delete().where(\r\n        (team_membership.c.join_user_id == user.id) &\r\n        (team_membership.c.team_id == team_id) &\r\n        (team_membership.c.audit_status == 1)\r\n    )\r\n    db.session.execute(user_team_record)\r\n    db.session.commit()\r\n    # 更新队伍中的成员数量\r\n    team.current_members -= 1\r\n    db.session.commit()\r\n    flash('成功退出队伍', 'success')\r\n\r\n    add_notification(team.admin_id, f\"成员 {current_user.username} 退出目的地为 {team.destination} 的队伍。\", url_for('view_team', team_id=team.id))\r\n\r\n    # 重定向回到我的队伍页面或者其他适当的页面\r\n    return redirect(url_for('my_join_team'))\r\n\r\n\r\n# 管理的队伍界面\r\n@app.route('/my_manage_team', methods=['GET'])\r\n@login_required\r\ndef my_manage_team():\r\n    teams = Team.query.all()\r\n    approved_teams = []\r\n    pending_teams = []\r\n\r\n    for team in teams:\r\n        membership = db.session.query(team_membership).filter_by(\r\n            join_user_id=current_user.id, team_id=team.id).first()\r\n\r\n        if membership is None:\r\n            continue  # 如果 membership 为空，跳过当前团队的处理\r\n\r\n        if membership.audit_status == 1:\r\n            approved_teams.append(team)\r\n        elif membership.audit_status == 0:\r\n            pending_teams.append(team)\r\n    return render_template('page/my_manage_team.html', teams=teams, approved_teams=approved_teams, pending_teams=pending_teams)\r\n\r\n\r\n# 加入的队伍界面\r\n@app.route('/my_join_team', methods=['GET'])\r\n@login_required\r\ndef my_join_team():\r\n    teams = Team.query.all()\r\n    approved_teams = []\r\n    pending_teams = []\r\n\r\n    for team in teams:\r\n        membership = db.session.query(team_membership).filter_by(\r\n            join_user_id=current_user.id, team_id=team.id).first()\r\n\r\n        if membership is None:\r\n            continue  # 如果 membership 为空，跳过当前团队的处理\r\n\r\n        if membership.audit_status == 1 and team.admin_id != current_user.id:\r\n            approved_teams.append(team)\r\n        elif membership.audit_status == 0:\r\n            pending_teams.append(team)\r\n    return render_template('page/my_join_team.html', teams=teams, approved_teams=approved_teams, pending_teams=pending_teams)\r\n\r\n\r\n# 加入队伍界面\r\n@app.route('/joinable_teams', methods=['GET'])\r\n@login_required\r\ndef joinable_teams():\r\n    teams = Team.query.all()\r\n    approved_teams = []\r\n    pending_teams = []\r\n    username = current_user.username\r\n\r\n    for team in teams:\r\n        membership = db.session.query(team_membership).filter_by(\r\n            join_user_id=current_user.id, team_id=team.id).first()\r\n\r\n        if membership is None:\r\n            continue  # 如果 membership 为空，跳过当前团队的处理\r\n\r\n        if membership.audit_status == 1:\r\n            approved_teams.append(team)\r\n        elif membership.audit_status == 0:\r\n            pending_teams.append(team)\r\n\r\n    return render_template('page/joinable_teams.html', teams=teams, approved_teams=approved_teams, pending_teams=pending_teams, username=username)\r\n\r\n\r\n# 管理员更改队伍信息\r\n@app.route('/manage_team/<int:team_id>', methods=['GET', 'POST'])\r\n@login_required\r\ndef manage_team(team_id):\r\n    team = Team.query.get_or_404(team_id)\r\n\r\n    if team.admin_id != current_user.id:\r\n        flash('您没有权限管理此队伍。', 'danger')\r\n        return redirect(url_for('my_manage_team'))\r\n\r\n    form = ManageTeamForm(obj=team)\r\n\r\n    if form.validate_on_submit():\r\n        if form.max_members.data < team.current_members:  # 判断设置的最大人数是否小于当前队伍中的人数\r\n            flash(\r\n                f'无法将队伍的最大人数设置为{form.max_members.data}，因为它小于当前的队伍人数 {team.current_members}.',\r\n                'danger')\r\n        else:\r\n            form.populate_obj(team)  # 使用表单数据更新队伍对象\r\n            db.session.commit()\r\n            flash('成功更新队伍信息！', 'success')\r\n\r\n            members = db.session.query(User).join(team_membership).filter(\r\n                team_membership.c.team_id == team.id,\r\n                team_membership.c.audit_status == 1\r\n            ).all()\r\n            # 给队伍成员发送队伍信息更新的通知\r\n            for member in members:\r\n                if member.id != team.admin_id:\r\n                    add_notification(member.id, f\"前往 {team.destination} 的队伍信息被管理员更新，请查看。\", url_for('view_team', team_id=team.id))\r\n\r\n        return redirect(url_for('manage_team', team_id=team.id))\r\n\r\n    # 只获取审核通过的成员\r\n    members = db.session.query(User).join(team_membership).filter(\r\n        team_membership.c.team_id == team.id,\r\n        team_membership.c.audit_status == 1\r\n    ).all()\r\n\r\n    return render_template('page/manage_team.html', team=team, form=form, members=members)\r\n\r\n\r\n# 管理员移除队员\r\n@app.route('/remove_member/<int:team_id>/<int:user_id>', methods=['POST'])\r\n@login_required\r\ndef remove_member(team_id, user_id):\r\n    team = Team.query.get_or_404(team_id)\r\n    user = User.query.get_or_404(user_id)\r\n\r\n    # 检查当前用户是否是队伍管理员\r\n    if team.admin_id != current_user.id:\r\n        flash('您目前没有权限从该队伍中移除成员。')\r\n        return redirect(url_for('manage_team', team_id=team_id))\r\n\r\n    # 检查要删除的用户是否是队伍管理员本人\r\n    if user.id == current_user.id:\r\n        flash('您作为管理员不能将自己从队伍中移除。')\r\n        return redirect(url_for('manage_team', team_id=team_id))\r\n\r\n    if user in team.members:\r\n        team.members.remove(user)\r\n        team.current_members -= 1\r\n        db.session.commit()\r\n        flash('成员已成功移除！', 'success')\r\n        add_notification(user.id, f\"你被移出前往 {team.destination} 的队伍。\", url_for('view_team'))\r\n\r\n    return redirect(url_for('manage_team', team_id=team_id))\r\n\r\n\r\n# 管理员移交管理员权限\r\n@app.route('/transfer_admin/<int:team_id>/<int:user_id>', methods=['POST'])\r\n@login_required\r\ndef transfer_admin(team_id, user_id):\r\n    team = Team.query.get_or_404(team_id)\r\n    if team.admin_id != current_user.id:\r\n        flash(\r\n            '您没有权限转移此队伍的管理员权限。', 'danger')\r\n        return redirect(url_for('manage_team', team_id=team.id))\r\n\r\n    new_admin = User.query.get_or_404(user_id)\r\n    if new_admin not in team.members:\r\n        flash('此用户不是该队伍的成员。', 'danger')\r\n        return redirect(url_for('manage_team', team_id=team.id))\r\n\r\n    team.admin_id = new_admin.id\r\n    db.session.commit()\r\n\r\n    flash(f'管理员权限已转移给 {new_admin.username}.', 'success')\r\n    add_notification(new_admin.id, f\"你已被设为前往 {team.destination} 的队伍的管理员。\", url_for('my_manage_team'))\r\n    return redirect(url_for('manage_team', team_id=team.id))\r\n\r\n\r\n# 邀请用户入队\r\n@app.route('/invite_user', methods=['POST'])\r\n@login_required\r\ndef invite_user():\r\n    data = request.get_json()\r\n    username = data.get('username')\r\n    team_id = data.get('team_id')\r\n    team = Team.query.get_or_404(team_id)\r\n\r\n    if not username or not team_id:\r\n        return jsonify({'success': False, 'message': '缺少参数'}), 400\r\n\r\n    invitee = User.query.filter_by(username=username).first()\r\n\r\n    if not invitee:\r\n        return jsonify({'success': False, 'message': '用户不存在'}), 404\r\n\r\n    # 检查是否邀请自己\r\n    if invitee.id == current_user.id:\r\n        return jsonify({'success': False, 'message': '不能邀请自己加入队伍'})\r\n\r\n    # 检查用户是否已经在队伍中\r\n    membership = db.session.query(team_membership).filter_by(join_user_id=invitee.id, team_id=team.id, audit_status=1).first()\r\n    if membership:\r\n        return jsonify({'success': False, 'message': '用户已在队伍中，无法再次邀请'})\r\n\r\n    # 检查队伍是否已满\r\n    if team.current_members >= team.max_members:\r\n        return jsonify({'success': False, 'message': '队伍人数已满，无法邀请更多成员'})\r\n\r\n    # 创建邀请\r\n    invitation = Invitation(\r\n        team_id=team_id,\r\n        inviter_id=current_user.id,\r\n        invitee_id=invitee.id,\r\n        status='pending'\r\n    )\r\n    db.session.add(invitation)\r\n    db.session.commit()\r\n\r\n    add_notification(invitee.id, f\"你收到来自 {current_user.username} 的入队邀请。\", url_for('received_invitations'))\r\n\r\n    return jsonify({'success': True, 'message': '邀请已发送'})\r\n\r\n\r\n# 收到的邀请界面\r\n@app.route('/received_invitations', methods=['GET'])\r\n@login_required\r\ndef received_invitations():\r\n    user_id = current_user.id\r\n    invitations = Invitation.query.filter_by(invitee_id=user_id).all()\r\n\r\n    return render_template('page/received_invitations.html', invitations=invitations)\r\n\r\n\r\n# 发送的邀请界面\r\n@app.route('/sent_invitations')\r\n@login_required\r\ndef sent_invitations():\r\n    invitations = Invitation.query.filter_by(inviter_id=current_user.id).all()\r\n    return render_template('page/sent_invitations.html', invitations=invitations)\r\n\r\n\r\n# 处理收到的入队邀请\r\n@app.route('/handle_invitation', methods=['POST'])\r\n@login_required\r\ndef handle_invitation():\r\n    data = request.json\r\n    invitation_id = data.get('invitation_id')\r\n    action = data.get('action')\r\n\r\n    if not invitation_id or not action:\r\n        return jsonify({'success': False, 'message': '缺少参数'}), 400\r\n\r\n    invitation = Invitation.query.get(invitation_id)\r\n\r\n    if not invitation:\r\n        return jsonify({'success': False, 'message': '邀请不存在'}), 404\r\n\r\n    if action == 'accept':\r\n        team_id = invitation.team_id\r\n        invitee_id = invitation.invitee_id\r\n        inviter_id = invitation.inviter_id\r\n        team = Team.query.get(team_id)\r\n\r\n        if team.admin_id == inviter_id:\r\n            # 直接加入队伍\r\n            membership = db.session.query(team_membership).filter_by(\r\n                join_user_id=invitee_id, team_id=team.id).first()\r\n\r\n            if membership:\r\n                if membership.audit_status == 2 or membership.audit_status == 0:\r\n                    # 如果找到记录且 audit_status 为 2 或 0，则将其更新为 1\r\n                    stmt = team_membership.update().where(\r\n                        team_membership.c.join_user_id == invitee_id,\r\n                        team_membership.c.team_id == team.id\r\n                    ).values(audit_status=1)\r\n                    db.session.execute(stmt)\r\n\r\n                    team.current_members += 1\r\n                else:\r\n                    flash('您已经在该队伍中！')\r\n            else:\r\n                # 如果没找到，则新增一条记录\r\n                ins = team_membership.insert().values(\r\n                    join_user_id=invitee_id, team_id=team_id, audit_status=1)\r\n                db.session.execute(ins)\r\n                team.current_members += 1\r\n\r\n            invitation.status = 'accepted'\r\n            add_notification(inviter_id, f\"你的邀请被 {current_user.username} 接受了。\", url_for('sent_invitations'))\r\n            db.session.commit()\r\n            return jsonify({'success': True, 'message': '邀请已接受'})\r\n        else:\r\n            membership = db.session.query(team_membership).filter_by(\r\n                join_user_id=invitee_id, team_id=team.id).first()\r\n\r\n            if membership:\r\n                if membership.audit_status == 2:\r\n                    # 如果找到记录且 audit_status 为 2，则将其更新为 0\r\n                    stmt = team_membership.update().where(\r\n                        team_membership.c.join_user_id == invitee_id,\r\n                        team_membership.c.team_id == team.id\r\n                    ).values(audit_status=0)\r\n                    db.session.execute(stmt)\r\n                else:\r\n                    flash('您已经在该队伍中！')\r\n            else:\r\n                # 如果没找到，则新增一条记录\r\n                ins = team_membership.insert().values(\r\n                    join_user_id=invitee_id, team_id=team_id, audit_status=0)\r\n                db.session.execute(ins)\r\n\r\n            invitation.status = 'accepted'\r\n            add_notification(inviter_id, f\"你的邀请被 {current_user.username} 接受了。\", url_for('sent_invitations'))\r\n            db.session.commit()\r\n            return jsonify({'success': True, 'message': '邀请已接受！\\n已成功向队伍管理员发送入队申请'})\r\n\r\n    elif action == 'decline':\r\n        invitation.status = 'declined'\r\n        add_notification(invitation.inviter_id, f\"你的邀请被 {current_user.username} 拒绝了。\", url_for('sent_invitations'))\r\n        db.session.commit()\r\n        return jsonify({'success': True, 'message': '邀请已拒绝'})\r\n\r\n    return jsonify({'success': False, 'message': '无效的操作'}), 400\r\n\r\n\r\n# 新增通知消息\r\ndef add_notification(user_id, message, link=None):\r\n    notification = Notification(user_id=user_id, message=message, link=link)\r\n    db.session.add(notification)\r\n    db.session.commit()\r\n\r\n\r\n# 消息通知界面\r\n@app.route('/notifications')\r\n@login_required\r\ndef notifications():\r\n    notifications_ = Notification.query.filter_by(user_id=current_user.id).order_by(Notification.timestamp.desc()).all()\r\n    return render_template('page/notifications.html', notifications=notifications_)\r\n\r\n\r\n# 更新消息阅读状态\r\n@app.route('/mark_as_read', methods=['POST'])\r\n@login_required\r\ndef mark_as_read():\r\n    data = request.get_json()\r\n    notification_id = data.get('notification_id')\r\n    notification = Notification.query.get_or_404(notification_id)\r\n\r\n    if notification.user_id != current_user.id:\r\n        return jsonify({'success': False, 'message': '您没有权限标记此通知为已读'}), 403\r\n\r\n    notification.is_read = True\r\n    db.session.commit()\r\n\r\n    return jsonify({'success': True, 'message': '消息已标记为已读'})\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision 20e904b7bd38d8d3c001745a5a2d6762cef393a2)
+++ b/app.py	(date 1718631222982)
@@ -533,9 +533,11 @@
 
         if membership.audit_status == 1:
             approved_teams.append(team)
-        elif membership.audit_status == 0:
+        elif membership.audit_status == 0 or membership.audit_status == 2:
             pending_teams.append(team)
 
+        print(pending_teams)
+
     return render_template('page/joinable_teams.html', teams=teams, approved_teams=approved_teams, pending_teams=pending_teams, username=username)
 
 
